# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import node_pb2 as node__pb2


class NodeStub(object):
    """The RPC for a node are defined below.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPeersList = channel.unary_unary(
                '/node.Node/GetPeersList',
                request_serializer=node__pb2.GetPeersListRequest.SerializeToString,
                response_deserializer=node__pb2.GetPeersListResponse.FromString,
                )
        self.AddNodeToPeersList = channel.unary_unary(
                '/node.Node/AddNodeToPeersList',
                request_serializer=node__pb2.AddNodeToPeersListRequest.SerializeToString,
                response_deserializer=node__pb2.AddNodeToPeersListResponse.FromString,
                )
        self.ConnectAsPeer = channel.unary_unary(
                '/node.Node/ConnectAsPeer',
                request_serializer=node__pb2.ConnectAsPeerRequest.SerializeToString,
                response_deserializer=node__pb2.ConnectAsPeerResponse.FromString,
                )
        self.IsNodeLive = channel.unary_unary(
                '/node.Node/IsNodeLive',
                request_serializer=node__pb2.IsNodeLiveRequest.SerializeToString,
                response_deserializer=node__pb2.IsNodeLiveResponse.FromString,
                )
        self.RelayMessage = channel.unary_unary(
                '/node.Node/RelayMessage',
                request_serializer=node__pb2.RelayMessageRequest.SerializeToString,
                response_deserializer=node__pb2.RelayMessageResponse.FromString,
                )


class NodeServicer(object):
    """The RPC for a node are defined below.
    """

    def GetPeersList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddNodeToPeersList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConnectAsPeer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsNodeLive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RelayMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPeersList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPeersList,
                    request_deserializer=node__pb2.GetPeersListRequest.FromString,
                    response_serializer=node__pb2.GetPeersListResponse.SerializeToString,
            ),
            'AddNodeToPeersList': grpc.unary_unary_rpc_method_handler(
                    servicer.AddNodeToPeersList,
                    request_deserializer=node__pb2.AddNodeToPeersListRequest.FromString,
                    response_serializer=node__pb2.AddNodeToPeersListResponse.SerializeToString,
            ),
            'ConnectAsPeer': grpc.unary_unary_rpc_method_handler(
                    servicer.ConnectAsPeer,
                    request_deserializer=node__pb2.ConnectAsPeerRequest.FromString,
                    response_serializer=node__pb2.ConnectAsPeerResponse.SerializeToString,
            ),
            'IsNodeLive': grpc.unary_unary_rpc_method_handler(
                    servicer.IsNodeLive,
                    request_deserializer=node__pb2.IsNodeLiveRequest.FromString,
                    response_serializer=node__pb2.IsNodeLiveResponse.SerializeToString,
            ),
            'RelayMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.RelayMessage,
                    request_deserializer=node__pb2.RelayMessageRequest.FromString,
                    response_serializer=node__pb2.RelayMessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'node.Node', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Node(object):
    """The RPC for a node are defined below.
    """

    @staticmethod
    def GetPeersList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/node.Node/GetPeersList',
            node__pb2.GetPeersListRequest.SerializeToString,
            node__pb2.GetPeersListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddNodeToPeersList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/node.Node/AddNodeToPeersList',
            node__pb2.AddNodeToPeersListRequest.SerializeToString,
            node__pb2.AddNodeToPeersListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConnectAsPeer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/node.Node/ConnectAsPeer',
            node__pb2.ConnectAsPeerRequest.SerializeToString,
            node__pb2.ConnectAsPeerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsNodeLive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/node.Node/IsNodeLive',
            node__pb2.IsNodeLiveRequest.SerializeToString,
            node__pb2.IsNodeLiveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RelayMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/node.Node/RelayMessage',
            node__pb2.RelayMessageRequest.SerializeToString,
            node__pb2.RelayMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
